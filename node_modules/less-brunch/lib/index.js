(function() {
  var LESSCompiler, less, sysPath;

  less = require('less');

  sysPath = require('path');

  module.exports = LESSCompiler = (function() {

    LESSCompiler.prototype.brunchPlugin = true;

    LESSCompiler.prototype.type = 'stylesheet';

    LESSCompiler.prototype.extension = 'less';

    function LESSCompiler(config) {
      this.config = config;
      null;
    }

    LESSCompiler.prototype.compile = function(data, path, callback) {
      var parser,
        _this = this;
      parser = new less.Parser({
        paths: [this.config.paths.root, sysPath.dirname(path)],
        filename: path
      });
      return parser.parse(data, function(error, tree) {
        var errStr;
        if (error != null) return callback(error.message);
        try {
          return callback(null, tree.toCSS());
        } catch (ex) {
          errStr = "" + ex.type + "Error:" + ex.message;
          if (ex.filename) {
            errStr += " in '" + ex.filename + ":" + ex.line + ":" + ex.column + "'";
          }
          return callback(errStr);
        }
      });
    };

    return LESSCompiler;

  })();

}).call(this);
