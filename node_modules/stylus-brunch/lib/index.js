(function() {
  var StylusCompiler, nib, stylus, sysPath,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  nib = require('nib');

  stylus = require('stylus');

  sysPath = require('path');

  module.exports = StylusCompiler = (function() {

    StylusCompiler.prototype.brunchPlugin = true;

    StylusCompiler.prototype.type = 'stylesheet';

    StylusCompiler.prototype.extension = 'styl';

    StylusCompiler.prototype.generators = {
      backbone: {
        style: "@import 'nib'\n"
      }
    };

    StylusCompiler.prototype._dependencyRegExp = /@import ['"](.*)['"]/g;

    function StylusCompiler(config) {
      this.config = config;
      this.getDependencies = __bind(this.getDependencies, this);
      this.compile = __bind(this.compile, this);
      null;
    }

    StylusCompiler.prototype.compile = function(data, path, callback) {
      var _ref;
      return stylus(data).set('compress', false).set('firebug', !!((_ref = this.config.stylus) != null ? _ref.firebug : void 0)).include(sysPath.join(this.config.paths.root)).include(sysPath.dirname(path)).use(nib()).render(callback);
    };

    StylusCompiler.prototype.getDependencies = function(data, path, callback) {
      var dependencies, parent, paths,
        _this = this;
      paths = data.match(this._dependencyRegExp) || [];
      parent = sysPath.dirname(path);
      dependencies = paths.map(function(path) {
        var res;
        res = _this._dependencyRegExp.exec(path);
        _this._dependencyRegExp.lastIndex = 0;
        return (res || [])[1];
      }).filter(function(path) {
        return !!path && path !== 'nib';
      }).map(function(path) {
        if (sysPath.extname(path) !== ("." + _this.extension)) {
          return path + ("." + _this.extension);
        } else {
          return path;
        }
      }).map(sysPath.join.bind(null, parent));
      return process.nextTick(function() {
        return callback(null, dependencies);
      });
    };

    return StylusCompiler;

  })();

}).call(this);
